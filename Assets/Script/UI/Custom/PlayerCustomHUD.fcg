/*
PlayerCustomHUD.fcg (replaces PlayerCustomHUD.eca)
Custom HUD for the player.
*/
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Hud.fcc" as Hud
import "LevelObject.fcc" as LevelObject
import "Playable.fcc" as Playable
import "Animation.fcc" as Animation
import "Hostility.fcc" as Hostility
import "../../Team/Team.fcg" as TeamFCG
import "../../Globals/Global.fcg" as GlobalFCG
import "../../Team/TeamMatchData.fcg" as TeamMatchData
import "Convert.fcc" as Convert
graph PlayerCustomHUD {
    // ------- Variables -------
    isUpdated bool = false // Flag to check if the HUD is updated
    teamScoreHUD entity<CustomUI> = nil // Custom UI for team score
    waterReminder entity<CustomUI> = nil // Custom UI for water reminder
    topTeam entity<LevelObject> = nil // Icon for the top team
    circle entity<Effect> = nil // Circle effect

    // ------- Functions -------
    func DisableScoreHUD(){
        if teamScoreHUD == nil {
            return
        }
        Destroy(teamScoreHUD)
    }

    func InitScoreHUD(){
        if teamScoreHUD != nil {
            return
        }
        CreateCustomUI(out var createdUI, thisEntity as entity<Player>, EResUI.TEAM_SCORE_HUD)
        teamScoreHUD = createdUI
        UpdateScoreHUD()
    }
    
    func UpdateScoreHUD(){
        if teamScoreHUD == nil {
            LogError("Team score HUD is nil and cannot be updated.")
            return
        }
        var teamList = GetAllTeams()
        var team1 = teamList[0]
        var team2 = teamList[1]
        var team3 = teamList[2]
        var team4 = teamList[3]
        var teamMap = globalEntity<GlobalFCG>.teamMap
        var teamIndicatorUI entity<UIWidget> = nil
        if thisEntity<Player>.HostTeam == team1 && team1 != nil {
            teamIndicatorUI = GetWidgetFromCustomUI(thisEntity as entity<Player>, teamScoreHUD, EResUITEAM_SCORE_HUD.CURRENT_TEAM_1 as CustomUIWidgetID)
        } else if thisEntity<Player>.HostTeam == team2 && team2 != nil {
            teamIndicatorUI = GetWidgetFromCustomUI(thisEntity as entity<Player>, teamScoreHUD, EResUITEAM_SCORE_HUD.CURRENT_TEAM_2 as CustomUIWidgetID)
        } else if thisEntity<Player>.HostTeam == team3 && team3 != nil {
            teamIndicatorUI = GetWidgetFromCustomUI(thisEntity as entity<Player>, teamScoreHUD, EResUITEAM_SCORE_HUD.CURRENT_TEAM_3 as CustomUIWidgetID)
        } else if thisEntity<Player>.HostTeam == team4 && team4 != nil {
            teamIndicatorUI = GetWidgetFromCustomUI(thisEntity as entity<Player>, teamScoreHUD, EResUITEAM_SCORE_HUD.CURRENT_TEAM_4 as CustomUIWidgetID)
        } else {
            LogError("Player's host team is not found in the team list.")
            return
        }
        teamIndicatorUI<UIWidget>.Active = true
        if team1 != nil {
            var team1ScoreWg = GetWidgetFromCustomUI(thisEntity as entity<Player>, teamScoreHUD, EResUITEAM_SCORE_HUD.TEAM1_SCORE)
            team1ScoreWg<UIWidgetLabel>.Content = ToString(team1<TeamMatchData>.totalPoint)
        }
        if team2 != nil {
            var team2ScoreWg = GetWidgetFromCustomUI(thisEntity as entity<Player>, teamScoreHUD, EResUITEAM_SCORE_HUD.TEAM2_SCORE)
            team2ScoreWg<UIWidgetLabel>.Content = ToString(team2<TeamMatchData>.totalPoint)
        }
        if team3 != nil {
            var team3ScoreWg = GetWidgetFromCustomUI(thisEntity as entity<Player>, teamScoreHUD, EResUITEAM_SCORE_HUD.TEAM3_SCORE)
            team3ScoreWg<UIWidgetLabel>.Content = ToString(team3<TeamMatchData>.totalPoint)
        }
        if team4 != nil {
            var team4ScoreWg = GetWidgetFromCustomUI(thisEntity as entity<Player>, teamScoreHUD, EResUITEAM_SCORE_HUD.TEAM4_SCORE)
            team4ScoreWg<UIWidgetLabel>.Content = ToString(team4<TeamMatchData>.totalPoint)
        }
    }

    func ShowWaterReminder(){
        if waterReminder != nil {
            waterReminder<CustomUI>.IsVisible = true
            return
        }
        CreateCustomUI(out var createdUI, thisEntity as entity<Player>, EResUI.REMINDER)
        waterReminder = createdUI
    }

    func CloseWaterReminder(){
        if waterReminder == nil {
            LogError("Water reminder UI is nil and cannot be closed.")
            return
        }
        waterReminder<CustomUI>.IsVisible = false
    }

    async func SetFirstBloodHUD(){
        CreateCustomUI(out var createdUI, thisEntity as entity<Player>, EResUI.FIRST_BLOOD)
        createdUI<CustomUI>.IsVisible = true
        WaitForMillisecond(3500)
        DestroyCustomUI(createdUI)
    }

    func SetTopTeamIcon(){
        CreateLevelObject(out var createdObject, Vector3{0, 0, 0}, EResLevelObject.ICON_OBJECT)
        topTeam = createdObject
        topTeam<Icon>.Resource = EResSprite.TOP_TEAM_ICON
        topTeam<Icon>.FollowTarget = thisEntity as entity<Player>
        topTeam<Icon>.IsIgnoreDepth = true
        topTeam<Icon>.Offset = Vector3{0, 1.8, 0}
    }

    func DisableTopTeam(){
        if topTeam == nil {
            return
        }
        Destroy(topTeam)
    }

    func SetColorCircle(){
        CreateEffect(out var createdEffect, thisEntity as entity<Player>, VFXType.Ring, LoopType.Once, true)
        circle = createdEffect
        var playerTeam entity<Team> = thisEntity<Player>.HostTeam
        circle<Effect>.Color = playerTeam<TeamFCG>.teamColor
        circle<Effect>.DiffuseAlpha = 20
        CreateFollow(circle, thisEntity, Vector3{0, 0, 0}, CoordinateSystemType.LocalPosition, out var createdEntity, true)
        Play(createdEntity as entity<Effect>, true)
    }
}