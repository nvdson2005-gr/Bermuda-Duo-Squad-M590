import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Combat.fcc" as Combat
import "Player.fcc" as Player

graph PlayerEvents {
    // Player state for random events
    isSmallerWhenHit bool = false // If true, player gets smaller when hit
    isBiggerWhenHit bool = false // If true, player gets bigger when hit

    // Mutex to prevent concurrent modifications
    mutex bool = false

    scale float = 1.0 // Current scale of the playerA

    // ========================== EVENTS ==========================
    event OnTakeDamage(target entity<Entity>, damageType DamageType, damage int, damagedBodyPart DamagedBodyPartType) {
        // Ignore environmental damage types
        if damageType == DamageType.KillZone || damageType == DamageType.ElectricZone || damageType == DamageType.Falling || damageType == DamageType.Airdrop {
            return
        }
        if isBiggerWhenHit == true && isSmallerWhenHit == true {
            LogWarning("<Player>: Both isBiggerWhenHit and isSmallerWhenHit are true. Recheck the logic.")
            return
        }
        if isSmallerWhenHit == true {
            ReduceScale()
        }
        if isBiggerWhenHit == true {
            IncreaseScale()
        }

        // Log damage into PlayerData (NOT IMPLEMENTED YET)
    }
    // ========================== UTILS ==========================
    async func ReduceScale(){
        if mutex == true {
            return
        }
        mutex = true
        if scale > 0.75 {
            scale = scale - 0.02
            var skeleton entity<Skeleton> = thisEntity<Player>.Skeleton
            if skeleton == nil {
                LogError("Skeleton is nil for player: " + thisEntity<Player>.NickName)
                mutex = false
                return
            }
            skeleton<Skeleton>.Head<SkeletonPart>.BoneScale = Vector3{scale, scale, scale}
            skeleton<Skeleton>.LeftArm<SkeletonPart>.BoneScale = Vector3{scale, scale, scale}
            skeleton<Skeleton>.RightArm<SkeletonPart>.BoneScale = Vector3{scale, scale, scale}
            skeleton<Skeleton>.LeftHand<SkeletonPart>.BoneScale = Vector3{scale, scale, scale}
            skeleton<Skeleton>.RightHand<SkeletonPart>.BoneScale = Vector3{scale, scale, scale}
        }
        WaitForMillisecond(50)
        mutex = false
    }
    async func IncreaseScale(){
        if mutex == true {
            return
        }
        mutex = true
        if scale <= 1.3 {
            scale = scale + 0.03
            var skeleton entity<Skeleton> = thisEntity<Player>.Skeleton
            if skeleton == nil {
                LogError("Skeleton is nil for player: " + thisEntity<Player>.NickName)
                mutex = false
                return
            }
            skeleton<Skeleton>.Head<SkeletonPart>.BoneScale = Vector3{scale, scale, scale}
            skeleton<Skeleton>.LeftArm<SkeletonPart>.BoneScale = Vector3{scale, scale, scale}
            skeleton<Skeleton>.RightArm<SkeletonPart>.BoneScale = Vector3{scale, scale, scale}
            skeleton<Skeleton>.LeftHand<SkeletonPart>.BoneScale = Vector3{scale, scale, scale}
            skeleton<Skeleton>.RightHand<SkeletonPart>.BoneScale = Vector3{scale, scale, scale}
        }
        WaitForMillisecond(50)
        mutex = false
    }
}